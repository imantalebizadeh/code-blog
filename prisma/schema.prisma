generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model User {
  id            String     @id @default(cuid())
  name          String?    @map("full_name")
  username      String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  Account       Account?
  role          Role       @default(USER)
  posts         Post[]
  comments      Comment[]
  Bookmarks     Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  content     String?    @db.Text
  summary     String     @default("") @db.Text
  published   Boolean    @default(false)
  cover_image String     @default("")
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  String
  comments    Comment[]
  Bookmark    Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Comment {
  id       String    @id @default(cuid())
  content  String    @db.Text
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId   String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?
  children Comment[] @relation("CommentToComment")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]

  @@map("categories")
}

model Bookmark {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@id([postId, userId], name: "bookmarks_pkey")
  @@map("bookmarks")
}

enum Role {
  USER
  ADMIN
}
