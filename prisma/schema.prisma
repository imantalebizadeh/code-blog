generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  username      String     @unique
  password      String?
  lastLoginAt   DateTime?
  role          Role       @default(USER)
  status        UserStatus @default(ACTIVE)

  accounts  Account[]
  sessions  Session[]
  bookmarks Bookmark[]
  comments  Comment[]
  posts     Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@index([email, username])
  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification-tokens")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String     @db.Text
  summary     String     @db.Text
  cover_image String
  viewCount   Int        @default(0)
  isDeleted   Boolean    @default(false)
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  String
  comments    Comment[]
  bookmarks   Bookmark[]
  tags        Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([authorId])
  @@map("posts")
}

model Comment {
  id       String    @id @default(cuid())
  content  String    @db.Text
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?
  children Comment[] @relation("CommentToComment")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]

  @@map("categories")
}

model Bookmark {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@id([postId, userId], name: "bookmarks_pky")
  @@map("bookmarks")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]

  @@map("tags")
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}
